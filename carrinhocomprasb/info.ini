
#COMPOSER AUTOLOAD
composer install
composer dumpautoload -o (recarregar)


#PHP
index.php required vendor/autoload.php


#SOLID
1 - Principio de Responsabilidade Única (SRP)
Uma classe deve ter apenas uma Responsabilidade.
(A classe carrinho compra está se responsabilizando por: carrinho,itens,pedido e envio do e-mail)
É mais produtivo ter muitas classes simples, do que poucas classes complexas.
Em um sistema grande, a complexidade se dara em conectar as diversas classes simples.
É importante ficar de olho nas ações (métodos) das classes, para verificar se não está fazendo 
algo que deveria ser feito por outra classe.

2 - Principio Aberto/Fechado (OCP)
Deve estar aberto para extensões mais fechados para modificações - é o mais complexo dos principios SOLID
- expansão(aberto): 
- alteração(fechado): 
Pensar em criar as classes de uma forma que possam crescer/extender, e não para serem alteradas.

3 - Princípio de Substituíção de Liskov (LSP)
Se q(x) é uma propriedade demonstável dos objetos x de tipo T. Etnão q(y) deve 
ser verdadeiro para objetos y de tipo S onde S é um subtipo de T.
- as classes filhas, deveriam poder substituir as classes pais.
- a classe filho não pode quebrar o funcionamento/comportamento da classe pai.
 
4 - Princípio da Segregação de Interface (ISP)
Classes clientes não podem ser forçadas a criar metodos que não serão utilizados pela INTERFACE
O correto seria criar uma interface segregada para cada funcionalidade

5 - Princípio da Inversão de Dependência (DIP)
Módulos de alto nível não devem depender de módulos de baixo nível. Ambos devem depender de abstrações.
Classe Mensageiro está dependendo das classes Email e Sms
Isso acontece quando um método faz uso de uma classe, ou faz o new Classe()
- Para resolver isso devemos utilizar a injeção de dependencia.
- Geralmente essa injeção é feita pelo construtor da classe de alto nível.

EXTRA - Testes de Unidade, ou teste Unitários - TDD (desenvolvimento orientado a testes)
Documentação PHP Unit: https://phpunit.readthedocs.io/pt_BR/latest/

